// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract FarguesserNFT is ERC721URIStorage, Ownable, ReentrancyGuard {
    // Mint fee (set to 0.00001 Ether)
    uint256 public mintFee = 0.00001 ether;
    // Counter for token IDs
    uint256 public nextTokenId;
    // Address that will receive the withdrawn funds
    address public withdrawAddress;

    // Struct to store mint parameters for each NFT
    struct MintData {
        int256 guess_x_location;
        int256 guess_y_location;
        int256 actual_x_location;
        int256 actual_y_location;
        uint256 score;
        uint256 distance;
    }

    // Mapping from token ID to its mint data
    mapping(uint256 => MintData) public tokenMintData;

    event NFTMinted(
        address indexed minter,
        uint256 tokenId,
        int256 guess_x_location,
        int256 guess_y_location,
        int256 actual_x_location,
        int256 actual_y_location,
        uint256 score,
        uint256 distance
    );
    event Withdrawn(address indexed to, uint256 amount);
    event WithdrawAddressChanged(address indexed newWithdrawAddress);
    event MintFeeChanged(uint256 newMintFee);

    constructor() ERC721("farguesserNFT", "FGNFT") Ownable(msg.sender) {
        // Set the deployer as the initial withdraw address
        withdrawAddress = msg.sender;
    }

    /// @notice Mint a new NFT by paying the mint fee, providing location and score data,
    /// and supplying a token URI that renders the "imagine the future" visual.
    /// @param _guessX The guessed x-coordinate.
    /// @param _guessY The guessed y-coordinate.
    /// @param _actualX The actual x-coordinate.
    /// @param _actualY The actual y-coordinate.
    /// @param _score The score.
    /// @param _distance The distance.
    /// @param _tokenURI The token URI for the NFT metadata.
    function mint(
        int256 _guessX,
        int256 _guessY,
        int256 _actualX,
        int256 _actualY,
        uint256 _score,
        uint256 _distance,
        string memory _tokenURI
    ) external payable {
        require(msg.value >= mintFee, "Insufficient fee sent");

        uint256 tokenId = nextTokenId;
        nextTokenId++;

        // Store the mint parameters in the mapping for later retrieval
        tokenMintData[tokenId] = MintData({
            guess_x_location: _guessX,
            guess_y_location: _guessY,
            actual_x_location: _actualX,
            actual_y_location: _actualY,
            score: _score,
            distance: _distance
        });

        // Mint the NFT to the sender
        _safeMint(msg.sender, tokenId);

        // Set the token URI for the minted NFT
        _setTokenURI(tokenId, _tokenURI);

        emit NFTMinted(msg.sender, tokenId, _guessX, _guessY, _actualX, _actualY, _score, _distance);
    }

    /// @notice Withdraw all collected fees to the current withdraw address.
    /// Only the owner can call this function.
    function withdraw() external onlyOwner nonReentrant {
        uint256 balance = address(this).balance;
        require(balance > 0, "No funds available for withdrawal");

        (bool success, ) = withdrawAddress.call{value: balance}("");
        require(success, "Withdrawal failed");

        emit Withdrawn(withdrawAddress, balance);
    }

    /// @notice Update the address where withdrawn funds should be sent.
    /// Only the owner can call this function.
    /// @param _newAddress The new beneficiary address.
    function setWithdrawAddress(address _newAddress) external onlyOwner {
        require(_newAddress != address(0), "Invalid address");
        withdrawAddress = _newAddress;
        emit WithdrawAddressChanged(_newAddress);
    }
    
    /// @notice Update the mint fee.
    /// Only the owner can call this function.
    /// @param _mintFee The new mint fee.
    function setMintFee(uint256 _mintFee) external onlyOwner {
        mintFee = _mintFee;
        emit MintFeeChanged(_mintFee);
    }
}
